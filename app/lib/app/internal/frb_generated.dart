// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.9.0.

// ignore_for_file: unused_import, unused_element, unnecessary_import, duplicate_ignore, invalid_use_of_internal_member, annotate_overrides, non_constant_identifier_names, curly_braces_in_flow_control_structures, prefer_const_literals_to_create_immutables, unused_field

import 'core/images.dart';
import 'core/job.dart';
import 'core/pagination.dart';
import 'core/settings.dart';
import 'dart:async';
import 'dart:convert';
import 'data/database.dart';
import 'frb_generated.dart';
import 'frb_generated.io.dart'
    if (dart.library.js_interop) 'frb_generated.web.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

/// Main entrypoint of the Rust API
class RustLib extends BaseEntrypoint<RustLibApi, RustLibApiImpl, RustLibWire> {
  @internal
  static final instance = RustLib._();

  RustLib._();

  /// Initialize flutter_rust_bridge
  static Future<void> init({
    RustLibApi? api,
    BaseHandler? handler,
    ExternalLibrary? externalLibrary,
  }) async {
    await instance.initImpl(
      api: api,
      handler: handler,
      externalLibrary: externalLibrary,
    );
  }

  /// Initialize flutter_rust_bridge in mock mode.
  /// No libraries for FFI are loaded.
  static void initMock({required RustLibApi api}) {
    instance.initMockImpl(api: api);
  }

  /// Dispose flutter_rust_bridge
  ///
  /// The call to this function is optional, since flutter_rust_bridge (and everything else)
  /// is automatically disposed when the app stops.
  static void dispose() => instance.disposeImpl();

  @override
  ApiImplConstructor<RustLibApiImpl, RustLibWire> get apiImplConstructor =>
      RustLibApiImpl.new;

  @override
  WireConstructor<RustLibWire> get wireConstructor =>
      RustLibWire.fromExternalLibrary;

  @override
  Future<void> executeRustInitializers() async {
    await api.crateInitApp();
  }

  @override
  ExternalLibraryLoaderConfig get defaultExternalLibraryLoaderConfig =>
      kDefaultExternalLibraryLoaderConfig;

  @override
  String get codegenVersion => '2.9.0';

  @override
  int get rustContentHash => 1528265151;

  static const kDefaultExternalLibraryLoaderConfig =
      ExternalLibraryLoaderConfig(
        stem: 'rust_lib_app',
        ioDirectory: 'rust/target/release/',
        webPrefix: 'pkg/',
      );
}

abstract class RustLibApi extends BaseApi {
  Future<PlatformInt64> crateCoreImagesImageJobRepositoryCreateJob({
    required ImageJobRepository that,
    required String prompt,
  });

  Future<ImageJob?> crateCoreImagesImageJobRepositoryFindById({
    required ImageJobRepository that,
    required PlatformInt64 id,
  });

  Future<List<ImageJob>> crateCoreImagesImageJobRepositoryFindByStatus({
    required ImageJobRepository that,
    required JobStatus status,
    required Pagination pagination,
  });

  Future<void> crateCoreImagesImageJobRepositoryInit({
    required ImageJobRepository that,
  });

  Future<List<ImageJob>> crateCoreImagesImageJobRepositoryLoad({
    required ImageJobRepository that,
    required Pagination pagination,
  });

  ImageJobRepository crateCoreImagesImageJobRepositoryNew({
    required ArcConnection db,
  });

  Future<void> crateCoreImagesImageJobRepositoryRemoveJob({
    required ImageJobRepository that,
    required PlatformInt64 id,
  });

  Future<void> crateCoreImagesImageJobRepositorySetImagePath({
    required ImageJobRepository that,
    required PlatformInt64 id,
    required String imagePath,
  });

  Future<void> crateCoreImagesImageJobRepositoryUpdateStatus({
    required ImageJobRepository that,
    required PlatformInt64 id,
    required JobStatus status,
  });

  Future<void> crateCoreSettingsSettingsRepositoryInit({
    required SettingsRepository that,
  });

  Future<Settings?> crateCoreSettingsSettingsRepositoryLoad({
    required SettingsRepository that,
  });

  SettingsRepository crateCoreSettingsSettingsRepositoryNew({
    required ArcConnection db,
  });

  Future<void> crateCoreSettingsSettingsRepositorySave({
    required SettingsRepository that,
    required Settings settings,
  });

  Future<ArcConnection> crateDataDatabaseDatabaseConnection({
    required String appDirectory,
  });

  Future<void> crateInitApp();

  Pagination crateCorePaginationPaginationNew();

  Pagination crateCorePaginationPaginationSetLimit({
    required Pagination that,
    required PlatformInt64 limit,
  });

  Pagination crateCorePaginationPaginationSetOffset({
    required Pagination that,
    required PlatformInt64 offset,
  });

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_ArcConnection;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_ArcConnection;

  CrossPlatformFinalizerArg
  get rust_arc_decrement_strong_count_ArcConnectionPtr;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_ImageJobRepository;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_ImageJobRepository;

  CrossPlatformFinalizerArg
  get rust_arc_decrement_strong_count_ImageJobRepositoryPtr;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_SettingsRepository;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_SettingsRepository;

  CrossPlatformFinalizerArg
  get rust_arc_decrement_strong_count_SettingsRepositoryPtr;
}

class RustLibApiImpl extends RustLibApiImplPlatform implements RustLibApi {
  RustLibApiImpl({
    required super.handler,
    required super.wire,
    required super.generalizedFrbRustBinding,
    required super.portManager,
  });

  @override
  Future<PlatformInt64> crateCoreImagesImageJobRepositoryCreateJob({
    required ImageJobRepository that,
    required String prompt,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerImageJobRepository(
            that,
            serializer,
          );
          sse_encode_String(prompt, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 1,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_i_64,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kCrateCoreImagesImageJobRepositoryCreateJobConstMeta,
        argValues: [that, prompt],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateCoreImagesImageJobRepositoryCreateJobConstMeta =>
      const TaskConstMeta(
        debugName: "ImageJobRepository_create_job",
        argNames: ["that", "prompt"],
      );

  @override
  Future<ImageJob?> crateCoreImagesImageJobRepositoryFindById({
    required ImageJobRepository that,
    required PlatformInt64 id,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerImageJobRepository(
            that,
            serializer,
          );
          sse_encode_i_64(id, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 2,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_opt_box_autoadd_image_job,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kCrateCoreImagesImageJobRepositoryFindByIdConstMeta,
        argValues: [that, id],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateCoreImagesImageJobRepositoryFindByIdConstMeta =>
      const TaskConstMeta(
        debugName: "ImageJobRepository_find_by_id",
        argNames: ["that", "id"],
      );

  @override
  Future<List<ImageJob>> crateCoreImagesImageJobRepositoryFindByStatus({
    required ImageJobRepository that,
    required JobStatus status,
    required Pagination pagination,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerImageJobRepository(
            that,
            serializer,
          );
          sse_encode_job_status(status, serializer);
          sse_encode_box_autoadd_pagination(pagination, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 3,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_list_image_job,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kCrateCoreImagesImageJobRepositoryFindByStatusConstMeta,
        argValues: [that, status, pagination],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateCoreImagesImageJobRepositoryFindByStatusConstMeta =>
      const TaskConstMeta(
        debugName: "ImageJobRepository_find_by_status",
        argNames: ["that", "status", "pagination"],
      );

  @override
  Future<void> crateCoreImagesImageJobRepositoryInit({
    required ImageJobRepository that,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerImageJobRepository(
            that,
            serializer,
          );
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 4,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kCrateCoreImagesImageJobRepositoryInitConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateCoreImagesImageJobRepositoryInitConstMeta =>
      const TaskConstMeta(
        debugName: "ImageJobRepository_init",
        argNames: ["that"],
      );

  @override
  Future<List<ImageJob>> crateCoreImagesImageJobRepositoryLoad({
    required ImageJobRepository that,
    required Pagination pagination,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerImageJobRepository(
            that,
            serializer,
          );
          sse_encode_box_autoadd_pagination(pagination, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 5,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_list_image_job,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kCrateCoreImagesImageJobRepositoryLoadConstMeta,
        argValues: [that, pagination],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateCoreImagesImageJobRepositoryLoadConstMeta =>
      const TaskConstMeta(
        debugName: "ImageJobRepository_load",
        argNames: ["that", "pagination"],
      );

  @override
  ImageJobRepository crateCoreImagesImageJobRepositoryNew({
    required ArcConnection db,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcConnection(
            db,
            serializer,
          );
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 6)!;
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerImageJobRepository,
          decodeErrorData: null,
        ),
        constMeta: kCrateCoreImagesImageJobRepositoryNewConstMeta,
        argValues: [db],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateCoreImagesImageJobRepositoryNewConstMeta =>
      const TaskConstMeta(
        debugName: "ImageJobRepository_new",
        argNames: ["db"],
      );

  @override
  Future<void> crateCoreImagesImageJobRepositoryRemoveJob({
    required ImageJobRepository that,
    required PlatformInt64 id,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerImageJobRepository(
            that,
            serializer,
          );
          sse_encode_i_64(id, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 7,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kCrateCoreImagesImageJobRepositoryRemoveJobConstMeta,
        argValues: [that, id],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateCoreImagesImageJobRepositoryRemoveJobConstMeta =>
      const TaskConstMeta(
        debugName: "ImageJobRepository_remove_job",
        argNames: ["that", "id"],
      );

  @override
  Future<void> crateCoreImagesImageJobRepositorySetImagePath({
    required ImageJobRepository that,
    required PlatformInt64 id,
    required String imagePath,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerImageJobRepository(
            that,
            serializer,
          );
          sse_encode_i_64(id, serializer);
          sse_encode_String(imagePath, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 8,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kCrateCoreImagesImageJobRepositorySetImagePathConstMeta,
        argValues: [that, id, imagePath],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateCoreImagesImageJobRepositorySetImagePathConstMeta =>
      const TaskConstMeta(
        debugName: "ImageJobRepository_set_image_path",
        argNames: ["that", "id", "imagePath"],
      );

  @override
  Future<void> crateCoreImagesImageJobRepositoryUpdateStatus({
    required ImageJobRepository that,
    required PlatformInt64 id,
    required JobStatus status,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerImageJobRepository(
            that,
            serializer,
          );
          sse_encode_i_64(id, serializer);
          sse_encode_job_status(status, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 9,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kCrateCoreImagesImageJobRepositoryUpdateStatusConstMeta,
        argValues: [that, id, status],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateCoreImagesImageJobRepositoryUpdateStatusConstMeta =>
      const TaskConstMeta(
        debugName: "ImageJobRepository_update_status",
        argNames: ["that", "id", "status"],
      );

  @override
  Future<void> crateCoreSettingsSettingsRepositoryInit({
    required SettingsRepository that,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSettingsRepository(
            that,
            serializer,
          );
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 10,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kCrateCoreSettingsSettingsRepositoryInitConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateCoreSettingsSettingsRepositoryInitConstMeta =>
      const TaskConstMeta(
        debugName: "SettingsRepository_init",
        argNames: ["that"],
      );

  @override
  Future<Settings?> crateCoreSettingsSettingsRepositoryLoad({
    required SettingsRepository that,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSettingsRepository(
            that,
            serializer,
          );
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 11,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_opt_box_autoadd_settings,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kCrateCoreSettingsSettingsRepositoryLoadConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateCoreSettingsSettingsRepositoryLoadConstMeta =>
      const TaskConstMeta(
        debugName: "SettingsRepository_load",
        argNames: ["that"],
      );

  @override
  SettingsRepository crateCoreSettingsSettingsRepositoryNew({
    required ArcConnection db,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcConnection(
            db,
            serializer,
          );
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 12)!;
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSettingsRepository,
          decodeErrorData: null,
        ),
        constMeta: kCrateCoreSettingsSettingsRepositoryNewConstMeta,
        argValues: [db],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateCoreSettingsSettingsRepositoryNewConstMeta =>
      const TaskConstMeta(
        debugName: "SettingsRepository_new",
        argNames: ["db"],
      );

  @override
  Future<void> crateCoreSettingsSettingsRepositorySave({
    required SettingsRepository that,
    required Settings settings,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSettingsRepository(
            that,
            serializer,
          );
          sse_encode_box_autoadd_settings(settings, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 13,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kCrateCoreSettingsSettingsRepositorySaveConstMeta,
        argValues: [that, settings],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateCoreSettingsSettingsRepositorySaveConstMeta =>
      const TaskConstMeta(
        debugName: "SettingsRepository_save",
        argNames: ["that", "settings"],
      );

  @override
  Future<ArcConnection> crateDataDatabaseDatabaseConnection({
    required String appDirectory,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(appDirectory, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 14,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcConnection,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kCrateDataDatabaseDatabaseConnectionConstMeta,
        argValues: [appDirectory],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateDataDatabaseDatabaseConnectionConstMeta =>
      const TaskConstMeta(
        debugName: "database_connection",
        argNames: ["appDirectory"],
      );

  @override
  Future<void> crateInitApp() {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 15,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta: kCrateInitAppConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateInitAppConstMeta =>
      const TaskConstMeta(debugName: "init_app", argNames: []);

  @override
  Pagination crateCorePaginationPaginationNew() {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 16)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_pagination,
          decodeErrorData: null,
        ),
        constMeta: kCrateCorePaginationPaginationNewConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateCorePaginationPaginationNewConstMeta =>
      const TaskConstMeta(debugName: "pagination_new", argNames: []);

  @override
  Pagination crateCorePaginationPaginationSetLimit({
    required Pagination that,
    required PlatformInt64 limit,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_box_autoadd_pagination(that, serializer);
          sse_encode_i_64(limit, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 17)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_pagination,
          decodeErrorData: null,
        ),
        constMeta: kCrateCorePaginationPaginationSetLimitConstMeta,
        argValues: [that, limit],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateCorePaginationPaginationSetLimitConstMeta =>
      const TaskConstMeta(
        debugName: "pagination_set_limit",
        argNames: ["that", "limit"],
      );

  @override
  Pagination crateCorePaginationPaginationSetOffset({
    required Pagination that,
    required PlatformInt64 offset,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_box_autoadd_pagination(that, serializer);
          sse_encode_i_64(offset, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 18)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_pagination,
          decodeErrorData: null,
        ),
        constMeta: kCrateCorePaginationPaginationSetOffsetConstMeta,
        argValues: [that, offset],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateCorePaginationPaginationSetOffsetConstMeta =>
      const TaskConstMeta(
        debugName: "pagination_set_offset",
        argNames: ["that", "offset"],
      );

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_ArcConnection =>
      wire.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcConnection;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_ArcConnection =>
      wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcConnection;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_ImageJobRepository =>
      wire.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerImageJobRepository;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_ImageJobRepository =>
      wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerImageJobRepository;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_SettingsRepository =>
      wire.rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSettingsRepository;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_SettingsRepository =>
      wire.rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSettingsRepository;

  @protected
  AnyhowException dco_decode_AnyhowException(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return AnyhowException(raw as String);
  }

  @protected
  ArcConnection
  dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcConnection(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ArcConnectionImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  ImageJobRepository
  dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerImageJobRepository(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ImageJobRepositoryImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  SettingsRepository
  dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSettingsRepository(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return SettingsRepositoryImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  ArcConnection
  dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcConnection(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ArcConnectionImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  ImageJobRepository
  dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerImageJobRepository(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ImageJobRepositoryImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  SettingsRepository
  dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSettingsRepository(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return SettingsRepositoryImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  ArcConnection
  dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcConnection(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ArcConnectionImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  ImageJobRepository
  dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerImageJobRepository(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ImageJobRepositoryImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  SettingsRepository
  dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSettingsRepository(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return SettingsRepositoryImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  String dco_decode_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as String;
  }

  @protected
  ImageJob dco_decode_box_autoadd_image_job(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_image_job(raw);
  }

  @protected
  Pagination dco_decode_box_autoadd_pagination(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_pagination(raw);
  }

  @protected
  Settings dco_decode_box_autoadd_settings(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_settings(raw);
  }

  @protected
  Database dco_decode_database(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 0)
      throw Exception('unexpected arr length: expect 0 but see ${arr.length}');
    return Database();
  }

  @protected
  int dco_decode_i_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  PlatformInt64 dco_decode_i_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeI64(raw);
  }

  @protected
  ImageJob dco_decode_image_job(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 4)
      throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
    return ImageJob(
      id: dco_decode_i_64(arr[0]),
      prompt: dco_decode_String(arr[1]),
      status: dco_decode_job_status(arr[2]),
      imagePath: dco_decode_String(arr[3]),
    );
  }

  @protected
  JobStatus dco_decode_job_status(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return JobStatus.values[raw as int];
  }

  @protected
  List<ImageJob> dco_decode_list_image_job(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_image_job).toList();
  }

  @protected
  Uint8List dco_decode_list_prim_u_8_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as Uint8List;
  }

  @protected
  ImageJob? dco_decode_opt_box_autoadd_image_job(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_image_job(raw);
  }

  @protected
  Settings? dco_decode_opt_box_autoadd_settings(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_settings(raw);
  }

  @protected
  Pagination dco_decode_pagination(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return Pagination.raw(
      limit: dco_decode_i_64(arr[0]),
      offset: dco_decode_i_64(arr[1]),
    );
  }

  @protected
  Settings dco_decode_settings(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return Settings(openaiApiKey: dco_decode_String(arr[0]));
  }

  @protected
  int dco_decode_u_8(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  void dco_decode_unit(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return;
  }

  @protected
  BigInt dco_decode_usize(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeU64(raw);
  }

  @protected
  AnyhowException sse_decode_AnyhowException(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_String(deserializer);
    return AnyhowException(inner);
  }

  @protected
  ArcConnection
  sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcConnection(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ArcConnectionImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  ImageJobRepository
  sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerImageJobRepository(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ImageJobRepositoryImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  SettingsRepository
  sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSettingsRepository(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return SettingsRepositoryImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  ArcConnection
  sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcConnection(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ArcConnectionImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  ImageJobRepository
  sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerImageJobRepository(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ImageJobRepositoryImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  SettingsRepository
  sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSettingsRepository(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return SettingsRepositoryImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  ArcConnection
  sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcConnection(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ArcConnectionImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  ImageJobRepository
  sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerImageJobRepository(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ImageJobRepositoryImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  SettingsRepository
  sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSettingsRepository(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return SettingsRepositoryImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  String sse_decode_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_prim_u_8_strict(deserializer);
    return utf8.decoder.convert(inner);
  }

  @protected
  ImageJob sse_decode_box_autoadd_image_job(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_image_job(deserializer));
  }

  @protected
  Pagination sse_decode_box_autoadd_pagination(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_pagination(deserializer));
  }

  @protected
  Settings sse_decode_box_autoadd_settings(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_settings(deserializer));
  }

  @protected
  Database sse_decode_database(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return Database();
  }

  @protected
  int sse_decode_i_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getInt32();
  }

  @protected
  PlatformInt64 sse_decode_i_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getPlatformInt64();
  }

  @protected
  ImageJob sse_decode_image_job(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_id = sse_decode_i_64(deserializer);
    var var_prompt = sse_decode_String(deserializer);
    var var_status = sse_decode_job_status(deserializer);
    var var_imagePath = sse_decode_String(deserializer);
    return ImageJob(
      id: var_id,
      prompt: var_prompt,
      status: var_status,
      imagePath: var_imagePath,
    );
  }

  @protected
  JobStatus sse_decode_job_status(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_32(deserializer);
    return JobStatus.values[inner];
  }

  @protected
  List<ImageJob> sse_decode_list_image_job(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <ImageJob>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_image_job(deserializer));
    }
    return ans_;
  }

  @protected
  Uint8List sse_decode_list_prim_u_8_strict(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint8List(len_);
  }

  @protected
  ImageJob? sse_decode_opt_box_autoadd_image_job(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_image_job(deserializer));
    } else {
      return null;
    }
  }

  @protected
  Settings? sse_decode_opt_box_autoadd_settings(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_settings(deserializer));
    } else {
      return null;
    }
  }

  @protected
  Pagination sse_decode_pagination(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_limit = sse_decode_i_64(deserializer);
    var var_offset = sse_decode_i_64(deserializer);
    return Pagination.raw(limit: var_limit, offset: var_offset);
  }

  @protected
  Settings sse_decode_settings(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_openaiApiKey = sse_decode_String(deserializer);
    return Settings(openaiApiKey: var_openaiApiKey);
  }

  @protected
  int sse_decode_u_8(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8();
  }

  @protected
  void sse_decode_unit(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  BigInt sse_decode_usize(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getBigUint64();
  }

  @protected
  bool sse_decode_bool(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8() != 0;
  }

  @protected
  void sse_encode_AnyhowException(
    AnyhowException self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.message, serializer);
  }

  @protected
  void
  sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcConnection(
    ArcConnection self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as ArcConnectionImpl).frbInternalSseEncode(move: true),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerImageJobRepository(
    ImageJobRepository self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as ImageJobRepositoryImpl).frbInternalSseEncode(move: true),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSettingsRepository(
    SettingsRepository self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as SettingsRepositoryImpl).frbInternalSseEncode(move: true),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcConnection(
    ArcConnection self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as ArcConnectionImpl).frbInternalSseEncode(move: false),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerImageJobRepository(
    ImageJobRepository self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as ImageJobRepositoryImpl).frbInternalSseEncode(move: false),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSettingsRepository(
    SettingsRepository self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as SettingsRepositoryImpl).frbInternalSseEncode(move: false),
      serializer,
    );
  }

  @protected
  void
  sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcConnection(
    ArcConnection self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as ArcConnectionImpl).frbInternalSseEncode(move: null),
      serializer,
    );
  }

  @protected
  void
  sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerImageJobRepository(
    ImageJobRepository self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as ImageJobRepositoryImpl).frbInternalSseEncode(move: null),
      serializer,
    );
  }

  @protected
  void
  sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSettingsRepository(
    SettingsRepository self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as SettingsRepositoryImpl).frbInternalSseEncode(move: null),
      serializer,
    );
  }

  @protected
  void sse_encode_String(String self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_prim_u_8_strict(utf8.encoder.convert(self), serializer);
  }

  @protected
  void sse_encode_box_autoadd_image_job(
    ImageJob self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_image_job(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_pagination(
    Pagination self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_pagination(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_settings(
    Settings self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_settings(self, serializer);
  }

  @protected
  void sse_encode_database(Database self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  void sse_encode_i_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putInt32(self);
  }

  @protected
  void sse_encode_i_64(PlatformInt64 self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putPlatformInt64(self);
  }

  @protected
  void sse_encode_image_job(ImageJob self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_64(self.id, serializer);
    sse_encode_String(self.prompt, serializer);
    sse_encode_job_status(self.status, serializer);
    sse_encode_String(self.imagePath, serializer);
  }

  @protected
  void sse_encode_job_status(JobStatus self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_list_image_job(
    List<ImageJob> self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_image_job(item, serializer);
    }
  }

  @protected
  void sse_encode_list_prim_u_8_strict(
    Uint8List self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer.putUint8List(self);
  }

  @protected
  void sse_encode_opt_box_autoadd_image_job(
    ImageJob? self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_image_job(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_settings(
    Settings? self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_settings(self, serializer);
    }
  }

  @protected
  void sse_encode_pagination(Pagination self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_64(self.limit, serializer);
    sse_encode_i_64(self.offset, serializer);
  }

  @protected
  void sse_encode_settings(Settings self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.openaiApiKey, serializer);
  }

  @protected
  void sse_encode_u_8(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self);
  }

  @protected
  void sse_encode_unit(void self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  void sse_encode_usize(BigInt self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putBigUint64(self);
  }

  @protected
  void sse_encode_bool(bool self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self ? 1 : 0);
  }
}

@sealed
class ArcConnectionImpl extends RustOpaque implements ArcConnection {
  // Not to be used by end users
  ArcConnectionImpl.frbInternalDcoDecode(List<dynamic> wire)
    : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  ArcConnectionImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
    : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_ArcConnection,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_ArcConnection,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_ArcConnectionPtr,
  );
}

@sealed
class ImageJobRepositoryImpl extends RustOpaque implements ImageJobRepository {
  // Not to be used by end users
  ImageJobRepositoryImpl.frbInternalDcoDecode(List<dynamic> wire)
    : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  ImageJobRepositoryImpl.frbInternalSseDecode(
    BigInt ptr,
    int externalSizeOnNative,
  ) : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_ImageJobRepository,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_ImageJobRepository,
    rustArcDecrementStrongCountPtr:
        RustLib
            .instance
            .api
            .rust_arc_decrement_strong_count_ImageJobRepositoryPtr,
  );

  Future<PlatformInt64> createJob({required String prompt}) => RustLib
      .instance
      .api
      .crateCoreImagesImageJobRepositoryCreateJob(that: this, prompt: prompt);

  Future<ImageJob?> findById({required PlatformInt64 id}) => RustLib
      .instance
      .api
      .crateCoreImagesImageJobRepositoryFindById(that: this, id: id);

  Future<List<ImageJob>> findByStatus({
    required JobStatus status,
    required Pagination pagination,
  }) => RustLib.instance.api.crateCoreImagesImageJobRepositoryFindByStatus(
    that: this,
    status: status,
    pagination: pagination,
  );

  Future<void> init() =>
      RustLib.instance.api.crateCoreImagesImageJobRepositoryInit(that: this);

  Future<List<ImageJob>> load({required Pagination pagination}) =>
      RustLib.instance.api.crateCoreImagesImageJobRepositoryLoad(
        that: this,
        pagination: pagination,
      );

  Future<void> removeJob({required PlatformInt64 id}) => RustLib.instance.api
      .crateCoreImagesImageJobRepositoryRemoveJob(that: this, id: id);

  Future<void> setImagePath({
    required PlatformInt64 id,
    required String imagePath,
  }) => RustLib.instance.api.crateCoreImagesImageJobRepositorySetImagePath(
    that: this,
    id: id,
    imagePath: imagePath,
  );

  Future<void> updateStatus({
    required PlatformInt64 id,
    required JobStatus status,
  }) => RustLib.instance.api.crateCoreImagesImageJobRepositoryUpdateStatus(
    that: this,
    id: id,
    status: status,
  );
}

@sealed
class SettingsRepositoryImpl extends RustOpaque implements SettingsRepository {
  // Not to be used by end users
  SettingsRepositoryImpl.frbInternalDcoDecode(List<dynamic> wire)
    : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  SettingsRepositoryImpl.frbInternalSseDecode(
    BigInt ptr,
    int externalSizeOnNative,
  ) : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_SettingsRepository,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_SettingsRepository,
    rustArcDecrementStrongCountPtr:
        RustLib
            .instance
            .api
            .rust_arc_decrement_strong_count_SettingsRepositoryPtr,
  );

  Future<void> init() =>
      RustLib.instance.api.crateCoreSettingsSettingsRepositoryInit(that: this);

  Future<Settings?> load() =>
      RustLib.instance.api.crateCoreSettingsSettingsRepositoryLoad(that: this);

  Future<void> save({required Settings settings}) => RustLib.instance.api
      .crateCoreSettingsSettingsRepositorySave(that: this, settings: settings);
}
